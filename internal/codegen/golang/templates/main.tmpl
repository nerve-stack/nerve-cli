// Code generated by nerve. DO NOT EDIT.
// nerve {{.NerveVersion}}
package {{.Package}}

import (
	"context"
	"errors"
	{{- range $pkg, $_ := .Imports }}
	"{{$pkg}}" 
	{{- end }}
	{{ if or (gt (len .Methods) 0) (gt (len .Events) 0) }}"github.com/nerve-stack/nerve-go"{{ end }}
)
{{ range $structName, $struct := .Structs }}
type {{$structName}} struct {
	{{- range $field := $struct.Fields }}
	{{$field.Name}} {{if $field.Optional }}*{{end}}{{$field.Type}} `json:"{{$field.Tag}}"`
	{{- end }}
}
{{ end }}

{{- range $a, $error := .Errors }}
type {{$error.Name}}Error struct {
	Message string
	Data {{$error.Name}}Data
}

func (e {{$error.Name}}Error) Error() string {
	return e.Message
}

func (e {{$error.Name}}Error) ToRPCError() *nerve.RPCError {
	return &nerve.RPCError{
		Code:    {{ $error.Code }},
		Message: e.Message,
		Data:    e.Data,
	}
}

{{- end }}
{{- range $enumName, $enum := .Enums }}

type {{$enumName}} string

const (
{{- range $value := .Values }}
	{{$enumName}}{{$value | camel}} {{$enumName}} = {{$value}}
{{- end }}
)
{{- end }}
{{- range $method := .Methods }}

{{- range $error := $method.Errors }}

func (e {{ $error }}Error) {{$method.Name}}Error() {}
{{- end }}
{{ if $method.Errors }}
type {{$method.Name}}Error interface {
	nerve.RPCErrorable
	{{$method.Name}}Error()
}
{{ end }}
func On{{$method.CapitalizedName}}(
	s *nerve.Server,
	handler func(ctx context.Context{{if $method.ParamsType}}, params *{{$method.ParamsType}}{{end}}) ({{if $method.ResultType}}{{$method.ResultType}}, {{end}}error),
) {
	nerve.Register(s, "{{$method.Name}}", func(
		ctx context.Context,
		{{if $method.ParamsType}}params *{{$method.ParamsType}}{{else}}_ *struct{}{{end}},
	) ({{if $method.ResultType}}{{$method.ResultType}}{{else}}struct{}{{end}}, *nerve.RPCError) {
		{{if $method.ResultType}}res, {{end}}err := handler(ctx{{if $method.ParamsType}}, params{{end}})
		if err != nil {
			{{- if $method.Errors }}
			var specErr {{$method.Name}}Error
			if errors.As(err, &specErr) {
				return {{if $method.ResultType}}{{$method.ResultType}}{{else}}struct{}{{end}}{}, specErr.ToRPCError()
			}
			{{ end }}
			return {{if $method.ResultType}}{{$method.ResultType}}{{else}}struct{}{{end}}{}, nerve.NewInternalError(err.Error())
		}

		return {{if $method.ResultType}}res{{else}}struct{}{}{{end}}, nil
	})
}
{{- end }}
{{- range $event := .Events }}

func Emit{{$event.CapitalizedName}}Event(data *{{$event.DataType}}) []byte {
	return nerve.EmitEvent("{{$event.Name}}", data)
}
{{- end }}
